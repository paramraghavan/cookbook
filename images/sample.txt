
```gremlin
g.V().hasLabel('ruleset')
  .as('ruleset')
  .outE('has_rule').as('ruleset_rule_edge')
  .inV().hasLabel('rule')
  .as('rule')
  .coalesce(
    outE('has_result').as('rule_result_edge')
      .inV().hasLabel('result')
      .order().by('created_timestamp', desc)
      .limit(1),
    constant([]).unfold()
  )
  .as('result')
  .select('ruleset', 'ruleset_rule_edge', 'rule', 'rule_result_edge', 'result')
  .by(elementMap())
  .by(elementMap())
  .by(elementMap())
  .by(elementMap())
  .by(elementMap())

```

This enhanced query:
1. Starts at ruleset vertices
2. Labels the edge between ruleset and rule as 'ruleset_rule_edge'
3. Labels the edge between rule and result as 'rule_result_edge'
4. Returns a complete path with:
   - ruleset vertex properties
   - ruleset-to-rule edge properties
   - rule vertex properties
   - rule-to-result edge properties
   - result vertex properties (latest by timestamp)

The output will be a collection of maps where each map contains all five elements with their complete properties. If a rule has no results, the 'rule_result_edge' and 'result' will be empty.
